{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from '../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      folders: [],\n      notes: [] // notes: [\n      //     {id: 8,\n      //     name: \"Wolves\"},\n      //     {id: 4, \n      //     name: \"Birds\"},\n      //     {id: 5, \n      //      name: \"Bears\"}\n      // ]\n\n    };\n\n    this.addFolder = folder => {\n      this.setState({\n        folders: [...this.state.folders, folder]\n      });\n    };\n\n    this.mergeFoldersAndNotes = (folders, notes) => {\n      notes.forEach(note => {\n        const index = folders.findIndex(f => f.id === note.folder);\n\n        if (!folders[index].notes) {\n          folders[index].notes = [];\n        }\n\n        folders[index].notes.push({\n          id: note.id,\n          name: note.name\n        });\n      });\n      return folders;\n    };\n\n    this.addNote = (folders, note) => {\n      folders.notes.push({\n        id: note.id,\n        name: note.name\n      });\n    };\n\n    this.updateNote = editedNote => {\n      const newNotes = this.state.map(note => note.id === editedNote.id ? editedNote : note);\n      this.setState({\n        notes: newNotes\n      });\n    };\n\n    this.updateFolder = updatedFolder => {\n      // console.log(updatedFolder)\n      const newFolders = this.state.folders.map(folder => folder.id === updatedFolder.id ? updatedFolder : folder);\n      this.setState({\n        folders: newFolders\n      });\n    };\n\n    this.handleDeleteNote = noteId => {\n      this.setState({\n        notes: this.state.notes.filter(note => note.id !== noteId)\n      });\n      this.props.history.push(\"/\");\n    };\n\n    this.handleDeleteFolder = folderId => {\n      this.setState({\n        folders: this.state.folders.filter(folder => folder.id !== folderId)\n      });\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/api/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/api/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      const data = this.mergeFoldersAndNotes(folders, notes);\n      this.setState({\n        folders: data\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    let folders = this.state.folders; // folders.forEach((folder) =>  console.log(`${folder.notes}`));\n\n    let getNotes = () => {\n      folders.forEach(folder => {\n        let notes = \"\".concat(folder.notes);\n        this.setState({\n          notes: notes\n        });\n      });\n    };\n\n    getNotes();\n    console.log(this.state.notes);\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/folder/:folderId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: history => React.createElement(AddFolder, {\n        addFolder: this.addFolder,\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: history => React.createElement(AddNote, {\n        addNewNote: this.addNewNote,\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/folders/:folderId/edit\",\n      component: EditFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"notes/:noteId/edit\",\n      component: EditNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const value = {\n      folders: this.state.folders,\n      notes: this.state.notes,\n      deleteNote: this.handleDeleteNote,\n      deleteFolder: this.handleDeleteFolder,\n      addNote: this.addNote,\n      addFolder: this.addFolder,\n      updateFolder: this.updateFolder,\n      updateNote: this.updateNote\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js"],"names":["React","Component","Route","Link","withRouter","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","EditNote","EditFolder","ApiContext","config","App","state","folders","notes","addFolder","folder","setState","mergeFoldersAndNotes","forEach","note","index","findIndex","f","id","push","name","addNote","updateNote","editedNote","newNotes","map","updateFolder","updatedFolder","newFolders","handleDeleteNote","noteId","filter","props","history","handleDeleteFolder","folderId","componentDidMount","Promise","all","fetch","API_ENDPOINT","then","notesRes","foldersRes","ok","json","e","reject","data","catch","error","console","renderNavRoutes","getNotes","log","path","renderMainRoutes","addNewNote","render","value","deleteNote","deleteFolder"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from '../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css'\n\nclass App extends Component {\n\n    state = {\n        folders: [],\n        notes: []\n        // notes: [\n        //     {id: 8,\n        //     name: \"Wolves\"},\n        //     {id: 4, \n        //     name: \"Birds\"},\n        //     {id: 5, \n        //      name: \"Bears\"}\n\n        // ]\n    }\n\n    addFolder = folder => {\n        this.setState({ \n            folders: [ ...this.state.folders, folder \n        ]})\n    }\n\n    mergeFoldersAndNotes = (folders, notes) => {\n        notes.forEach((note) => {\n          const index = folders.findIndex(f => f.id === note.folder) \n          if (!folders[index].notes) {\n            folders[index].notes = []\n          }\n          folders[index].notes.push({ \n            id: note.id, \n            name: note.name \n          })\n          })\n        return folders\n      }\n\n      addNote = (folders, note) => {\n        folders.notes.push({ \n            id: note.id, \n            name: note.name \n        })\n    };\n\n    updateNote = editedNote  => {\n        const newNotes = this.state.map(note =>\n            (note.id === editedNote.id)\n            ? editedNote\n            : note\n            )\n        this.setState({\n            notes: newNotes\n        })\n    }\n\n    updateFolder = updatedFolder => {\n        // console.log(updatedFolder)\n        const newFolders = this.state.folders.map(folder =>\n          (folder.id === updatedFolder.id)\n            ? updatedFolder\n            : folder\n        )\n        this.setState({\n        folders: newFolders\n        })\n    };\n\n    handleDeleteNote = noteId => {\n        this.setState({\n            notes: this.state.notes.filter(note => note.id !== noteId)\n        });\n        this.props.history.push(`/`)\n    };\n\n    handleDeleteFolder = folderId => {\n        this.setState({\n            folders: this.state.folders.filter(folder => folder.id !== folderId)\n        });\n    };\n  \n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/api/notes`),\n            fetch(`${config.API_ENDPOINT}/api/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n               \n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n                    \n                    return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n               const data = this.mergeFoldersAndNotes(folders, notes)\n\n                this.setState({folders: data});\n\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n    renderNavRoutes() {\n        let folders  = this.state.folders;\n\n        // folders.forEach((folder) =>  console.log(`${folder.notes}`));\nlet getNotes = () => {\n    folders.forEach((folder) => {\n    let notes = `${folder.notes}`\n    this.setState ({\n        notes: notes\n    })  \n  })\n}\n\ngetNotes()\n\nconsole.log(this.state.notes)\n\n    return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav} />\n                <Route path=\"/folder/:folderId\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n   \n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route \n                    path=\"/note/:noteId\" \n                    component={NotePageMain} \n                />\n\n                <Route path='/add-folder' \n                    render={(history) =>\n                <AddFolder\n                    addFolder={this.addFolder}\n                    folders ={this.state.folders} \n                />}\n                />\n               <Route path='/add-note'\n                render={(history) =>\n                    <AddNote\n                        addNewNote = {this.addNewNote}\n                        folders ={this.state.folders} \n                    /> }\n                />\n                <Route \n                    path='/folders/:folderId/edit'\n                    component={EditFolder} \n                    /> \n\n                <Route \n                    path='notes/:noteId/edit'\n                    component={EditNote} \n                    /> \n            </>\n        );\n    }\n\n    render() {\n        const value = {\n        folders: this.state.folders,\n        notes: this.state.notes,\n        deleteNote: this.handleDeleteNote,\n        deleteFolder: this.handleDeleteFolder,\n        addNote: this.addNote,\n        addFolder: this.addFolder,\n        updateFolder: this.updateFolder,\n        updateNote: this.updateNote\n        };\n       \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}