{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from '../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      folders: [],\n      notes: [{\n        id: 8,\n        name: \"wolves\"\n      }, {\n        id: 4,\n        name: \"Birds\"\n      }, {\n        id: 5,\n        name: \"Bears\"\n      }]\n    };\n\n    this.addFolder = folder => {\n      this.setState({\n        folders: [...this.state.folders, folder]\n      });\n    };\n\n    this.mergeFoldersAndNotes = (folders, notes) => {\n      notes.forEach(note => {\n        const index = folders.findIndex(f => f.id === note.folder);\n\n        if (!folders[index].notes) {\n          folders[index].notes = [];\n        }\n\n        folders[index].notes.push({\n          id: note.id,\n          name: note.name\n        });\n      });\n      return folders;\n    };\n\n    this.addNote = (folders, note) => {\n      folders.notes.push({\n        id: note.id,\n        name: note.name\n      });\n    };\n\n    this.updateFolder = editedFolder => {\n      const newFolders = this.state.map(folder => folder.id === editedFolder.id ? editedFolder : folder);\n      this.setState({\n        folders: newFolders\n      });\n    };\n\n    this.handleDeleteFolder = folderId => {\n      this.setState({\n        folders: this.state.folders.filter(folder => folder.id !== folderId)\n      });\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/api/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/api/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      const data = this.mergeFoldersAndNotes(folders, notes);\n      this.setState({\n        folders: data\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/folder/:folderId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: history => React.createElement(AddFolder, {\n        addNewFolder: this.addNewFolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: history => React.createElement(AddNote, {\n        addNewNote: this.addNewNote,\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/folders/:folderId/edit\",\n      component: EditFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"notes/:notedId/edit\",\n      component: EditNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    console.log(this.state); // console.log(this.state.folders.notes)\n    // console.log(this.state.folders[0])\n\n    const value = {\n      folders: this.state.folders,\n      notes: this.state.notes,\n      deleteNote: this.handleDeleteNote,\n      deleteFolder: this.handleDeleteFolder,\n      addNote: this.addNote,\n      updateFolder: this.updateFolder\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js"],"names":["React","Component","Route","Link","withRouter","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","EditNote","EditFolder","ApiContext","config","App","state","folders","notes","id","name","addFolder","folder","setState","mergeFoldersAndNotes","forEach","note","index","findIndex","f","push","addNote","updateFolder","editedFolder","newFolders","map","handleDeleteFolder","folderId","filter","componentDidMount","Promise","all","fetch","API_ENDPOINT","then","notesRes","foldersRes","ok","json","e","reject","data","catch","error","console","renderNavRoutes","path","renderMainRoutes","history","addNewFolder","addNewNote","render","log","value","deleteNote","handleDeleteNote","deleteFolder"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from'../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css'\n\nclass App extends Component {\n\n    state = {\n        folders: [],\n        notes: [\n            {id: 8,\n            name: \"wolves\"},\n            {id: 4, \n            name: \"Birds\"},\n            {id: 5, name: \"Bears\"}\n\n        ]\n    }\n\n    addFolder = folder => {\n        this.setState({ \n            folders: [ ...this.state.folders, folder \n        ]})\n    }\n\n    mergeFoldersAndNotes = (folders, notes) => {\n        notes.forEach((note) => {\n          const index = folders.findIndex(f => f.id === note.folder) \n          if (!folders[index].notes) {\n            folders[index].notes = []\n          }\n          folders[index].notes.push({ \n            id: note.id, \n            name: note.name \n          })\n          })\n        return folders\n      }\n\n      addNote = (folders, note) => {\n        folders.notes.push({ \n            id: note.id, \n            name: note.name \n        })\n    };\n\n    // updateNote = editedNote  => {\n    //     const newNotes = this.state.map(note =>\n    //         (note.id === editedNote.id)\n    //         ? editedNote\n    //         : note\n    //         )\n    //     this.setState({\n    //         notes: newNotes\n    //     })\n    // }\n\n    updateFolder = editedFolder  => {\n        const newFolders = this.state.map(folder =>\n            (folder.id === editedFolder.id)\n            ? editedFolder\n            : folder\n            )\n        this.setState({\n            folders: newFolders\n        })\n    }\n  \n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/api/notes`),\n            fetch(`${config.API_ENDPOINT}/api/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n               \n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n                    \n                    return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n               const data = this.mergeFoldersAndNotes(folders, notes)\n\n                this.setState({folders: data});\n\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n\n    // handleDeleteNote = noteId => {\n    //     this.setState({\n    //         : this.state.notes.filter(note => note.id !== noteId)\n    //     });\n    //     this.props.history.push(`/`)\n    // };\n\n    handleDeleteFolder = folderId => {\n        this.setState({\n            folders: this.state.folders.filter(folder => folder.id !== folderId)\n        });\n    };\n\n    renderNavRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav} />\n                <Route path=\"/folder/:folderId\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route \n                    path=\"/note/:noteId\" \n                    component={NotePageMain} \n                />\n\n                <Route path='/add-folder' \n                    render={(history) =>\n                <AddFolder\n                    addNewFolder={this.addNewFolder}\n                />}\n                />\n               <Route path='/add-note'\n                render={(history) =>\n                    <AddNote\n                        addNewNote = {this.addNewNote}\n                        folders ={this.state.folders} \n                    /> }\n                />\n                <Route \n                    path='/folders/:folderId/edit'\n                    component={EditFolder} \n                    /> \n\n                <Route \n                    path='notes/:notedId/edit'\n                    component={EditNote} \n                    /> \n            </>\n        );\n    }\n\n    render() {\n\n\n        console.log(this.state)\n        // console.log(this.state.folders.notes)\n        // console.log(this.state.folders[0])\n\n            const value = {\n            folders: this.state.folders,\n            notes: this.state.notes,\n            deleteNote: this.handleDeleteNote,\n            deleteFolder: this.handleDeleteFolder,\n            addNote: this.addNote,\n            updateFolder: this.updateFolder\n            };\n\n        \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}