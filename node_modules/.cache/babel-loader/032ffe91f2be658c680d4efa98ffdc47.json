{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from '../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      folders: [],\n      notes: [] //   createFolderContent = () => {\n      //     const foldersRes = [\n      //         { id: 1, name: 'Important' },\n      //         { id: 2, name: 'Super' },\n      //     ]\n      //     const notesRes = [\n      //         { id: 1, name: 'Donkey Rhubarb 1', folderId: 1 },\n      //         { id: 2, name: 'Donkey Rhubarb 2', folderId: 2 },\n      //         { id: 3, name: 'Donkey Rhubarb 3', folderId: 2 },\n      //         { id: 4, name: 'Donkey Rhubarb 4', folderId: 1 },\n      //         { id: 5, name: 'Donkey Rhubarb 5', folderId: 2 },\n      //     ]\n      //     this.state.folders = notesRes.reduce((foldersRes, note) => {\n      //         const index = foldersRes.findIndex(f => f.id === note.folderId) \n      //         if (!foldersRes[index].notes) \n      //         foldersRes[index].notes = []\n      //         foldersRes[index].notes.push({ \n      //         id: note.id, \n      //         name: note.name \n      //         })\n      //         return foldersRes\n      //     }, foldersRes)\n      // }\n\n    };\n\n    this.addNewFolder = folder => {\n      this.setState({\n        folders: [...this.state.folders, folder]\n      });\n    };\n\n    this.editFolder = editedFolder => {\n      const newFolders = this.state.folders.map(folder => folder.id === editedFolder.id ? editedFolder : folder);\n      this.setState({\n        folders: newFolders\n      });\n    };\n\n    this.addNewNote = note => {\n      this.setState({\n        notes: [...this.state.notes, note]\n      });\n    };\n\n    this.editNote = editedNote => {\n      const newNotes = this.state.notes.map(note => note.id === editedNote.id ? editedNote : note);\n      this.setState({\n        notes: newNotes\n      });\n    };\n\n    this.handleDeleteNote = noteId => {\n      this.setState({\n        notes: this.state.notes.filter(note => note.id !== noteId)\n      });\n      this.props.history.push(\"/\");\n    };\n\n    this.handleDeleteFolder = folderId => {\n      this.setState({\n        folders: this.state.folders.filter(folder => folder.id !== folderId)\n      });\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/api/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/api/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      console.log(notes, folders);\n      this.setState({\n        notes,\n        folders\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: history => React.createElement(AddFolder, {\n        addNewFolder: this.addNewFolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: history => React.createElement(AddNote, {\n        addNewNote: this.addNewNote,\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/edit/:noteId\",\n      render: history => React.createElement(EditNote, {\n        editNote: this.EditNote,\n        folders: this.state.folders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/edit/:folderId\",\n      render: history => React.createElement(EditFolder, {\n        editFolder: this.EditFolder,\n        folders: this.state.folders,\n        notes: this.state.notes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote,\n      deleteFolder: this.handleDeleteFolder\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js"],"names":["React","Component","Route","Link","withRouter","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","EditNote","EditFolder","ApiContext","config","App","state","folders","notes","addNewFolder","folder","setState","editFolder","editedFolder","newFolders","map","id","addNewNote","note","editNote","editedNote","newNotes","handleDeleteNote","noteId","filter","props","history","push","handleDeleteFolder","folderId","componentDidMount","Promise","all","fetch","API_ENDPOINT","then","notesRes","foldersRes","ok","json","e","reject","console","log","catch","error","renderNavRoutes","path","renderMainRoutes","render","value","deleteNote","deleteFolder"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from'../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css'\n\nclass App extends Component {\n\n    state = {\n        folders: [],\n        notes: []\n      }\n\n    //   createFolderContent = () => {\n        \n    //     const foldersRes = [\n    //         { id: 1, name: 'Important' },\n    //         { id: 2, name: 'Super' },\n    //     ]\n        \n    //     const notesRes = [\n    //         { id: 1, name: 'Donkey Rhubarb 1', folderId: 1 },\n    //         { id: 2, name: 'Donkey Rhubarb 2', folderId: 2 },\n    //         { id: 3, name: 'Donkey Rhubarb 3', folderId: 2 },\n    //         { id: 4, name: 'Donkey Rhubarb 4', folderId: 1 },\n    //         { id: 5, name: 'Donkey Rhubarb 5', folderId: 2 },\n    //     ]\n      \n    //     this.state.folders = notesRes.reduce((foldersRes, note) => {\n    //         const index = foldersRes.findIndex(f => f.id === note.folderId) \n    //         if (!foldersRes[index].notes) \n    //         foldersRes[index].notes = []\n    //         foldersRes[index].notes.push({ \n    //         id: note.id, \n    //         name: note.name \n    //         })\n    //         return foldersRes\n    //     }, foldersRes)\n    // }\n\n    addNewFolder = folder => {\n        this.setState({ \n            folders: [ ...this.state.folders, folder \n        ]})\n    }\n\n   editFolder = editedFolder => {\n         const newFolders = this.state.folders.map(folder =>\n            (folder.id === editedFolder.id)\n            ? editedFolder\n            : folder\n            )\n        this.setState({\n        folders: newFolders\n        })\n   }\n\n    addNewNote = (note) => {\n        this.setState({ \n            notes: [ ...this.state.notes, note\n        ]});\n    };\n\n    editNote= editedNote => {\n        const newNotes = this.state.notes.map(note =>\n            (note.id === editedNote.id)\n            ? editedNote\n            : note\n            )\n        this.setState({\n            notes: newNotes\n        })\n    }\n \n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/api/notes`),\n            fetch(`${config.API_ENDPOINT}/api/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n               \n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n                    \n                    return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n                console.log(notes, folders)\n                this.setState({notes, folders});\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n    handleDeleteNote = noteId => {\n        this.setState({\n            notes: this.state.notes.filter(note => note.id !== noteId)\n        });\n        this.props.history.push(`/`)\n    };\n\n    handleDeleteFolder = folderId => {\n        this.setState({\n            folders: this.state.folders.filter(folder => folder.id !== folderId)\n        });\n    };\n\n    renderNavRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route \n                    path=\"/note/:noteId\" \n                    component={NotePageMain} \n                />\n\n                <Route path='/add-folder' \n                    render={(history) =>\n                <AddFolder\n                    addNewFolder={this.addNewFolder}\n                />}\n                />\n               <Route path='/add-note'\n                render={(history) =>\n                    <AddNote\n                        addNewNote = {this.addNewNote}\n                        folders ={this.state.folders} \n                    /> }\n                />\n                <Route path='/edit/:noteId'\n                    render={(history) =>\n                    <EditNote\n                        editNote = {this.EditNote}\n                        folders ={this.state.folders} \n                    /> }\n                />\n\n                <Route path='/edit/:folderId'\n                    render={(history) =>\n                    <EditFolder\n                        editFolder = {this.EditFolder}\n                        folders = {this.state.folders} \n                        notes = {this.state.notes}\n                    /> }\n            />          \n            </>\n        );\n    }\n\n    render() {\n            const value = {\n            notes: this.state.notes,\n            folders: this.state.folders,\n            deleteNote: this.handleDeleteNote,\n            deleteFolder: this.handleDeleteFolder\n            };\n        \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}