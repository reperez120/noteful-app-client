{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/notefulorganizingreactcode-app-state/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport NotefulError from '../NotefulError';\nimport './App.css';\nimport { throws } from 'assert';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      folders: [],\n      folderName: '',\n      noteNameInput: '',\n      noteContentInput: '',\n      noteFolderSelect: '',\n      noteNameInputVaild: false,\n      formValid: false,\n      validationMessages: {\n        noteNameInput: ''\n      }\n    };\n\n    this.addNewFolder = folder => {\n      console.log(this.state);\n      this.setState({\n        folders: [...this.state.folders, folder]\n      });\n      console.log(this.state);\n    };\n\n    this.handleFolderSubmit = e => {\n      console.log('handleSubmit ran');\n      e.preventDefault();\n      const newFolder = this.state.folderName;\n      const url = 'http://localhost:9090/folders';\n      const options = {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newFolder\n        })\n      };\n      fetch(url, options).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n\n        return res.json();\n      }).then(data => {\n        this.addNewFolder({\n          name: newFolder,\n          id: data.id\n        });\n        console.log(data);\n        this.props.history.push('/');\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.addNewNote = noteNameInput => {\n      console.log('addNewNote ran');\n      this.setState({\n        notes: [...this.state.notes, note]\n      });\n    };\n\n    this.addNoteContent = noteContentInput => {\n      this.setState({\n        noteContentInput\n      });\n    };\n\n    this.selectFolder = noteFolderSelect => {\n      this.setState({\n        noteFolderSelect\n      });\n    };\n\n    this.handleNoteSubmit = e => {\n      console.log('handleSubmit ran');\n      e.preventDefault();\n      const newNote = this.state.noteNameInput;\n      const newContent = this.state.noteContentInput;\n      const selectedFolder = this.state.noteFolderSelect;\n      const url = 'http://localhost:9090/notes';\n      const options = {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newNote,\n          folderId: selectedFolder,\n          content: newContent\n        })\n      };\n      fetch(url, options).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n\n        return res.json();\n      }).then(data => {\n        this.setState({\n          name: '',\n          folderId: '',\n          content: '',\n          folders: []\n        });\n        this.props.history.push('/');\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.handleDeleteNote = noteId => {\n      this.setState({\n        notes: this.state.notes.filter(note => note.id !== noteId)\n      });\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      this.setState({\n        notes,\n        folders\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: history => React.createElement(AddFolder, {\n        folderName: this.folderName,\n        addNewFolder: this.addNewFolder,\n        handleFolderSubmit: this.handleFolderSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: history => React.createElement(AddNote, {\n        noteNameInput: this.noteNameInput,\n        noteContentInput: this.noteContentInput,\n        noteFolderSelect: this.noteFolderSelect,\n        noteNameInputVaild: this.noteNameInputVaild,\n        formVaild: this.formValid,\n        validationMessages: this.validationMessages,\n        addNewNote: this.addNewNote,\n        addNoteContent: this.addNoteContent,\n        selectFolder: this.selectFolder,\n        handleNoteSubmit: this.handleNoteSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/notefulorganizingreactcode-app-state/src/App/App.js"],"names":["React","Component","Route","Link","withRouter","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","ApiContext","config","NotefulError","throws","App","state","notes","folders","folderName","noteNameInput","noteContentInput","noteFolderSelect","noteNameInputVaild","formValid","validationMessages","addNewFolder","folder","console","log","setState","handleFolderSubmit","e","preventDefault","newFolder","url","options","method","headers","body","JSON","stringify","name","fetch","then","res","ok","Error","json","data","id","props","history","push","catch","err","error","message","addNewNote","note","addNoteContent","selectFolder","handleNoteSubmit","newNote","newContent","selectedFolder","folderId","content","handleDeleteNote","noteId","filter","componentDidMount","Promise","all","API_ENDPOINT","notesRes","foldersRes","reject","renderNavRoutes","map","path","renderMainRoutes","render","value","deleteNote"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom'\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport NotefulError from '../NotefulError';\nimport './App.css';\nimport { throws } from 'assert';\n\nclass App extends Component {\n\n    state = {\n        notes: [],\n        folders: [],\n        folderName: '',\n        noteNameInput: '',\n        noteContentInput:'',\n        noteFolderSelect: '',\n        noteNameInputVaild: false,\n        formValid: false,\n        validationMessages: {\n        noteNameInput: ''\n        },\n    };\n\n    addNewFolder = folder => {\n        console.log(this.state)\n        this.setState({ \n            folders: [ ...this.state.folders, folder \n        ]})\n        console.log(this.state)\n    }\n  \n    handleFolderSubmit = e => {\n        console.log('handleSubmit ran')\n        e.preventDefault()\n        const newFolder = this.state.folderName;\n        const url = 'http://localhost:9090/folders';\n        const options = {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify (\n            {name: newFolder\n            }),\n    }\n    \n    fetch(url, options)\n      .then(res => {\n        if(!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n        return res.json();\n      })\n      .then(data => {     \n        this.addNewFolder({name: newFolder, id: data.id});\n        console.log(data)\n        this.props.history.push('/')\n      })\n      .catch(err => {\n        this.setState({\n          error: err.message\n        });\n      })\n    }\n    \n    addNewNote = noteNameInput => {\n        console.log('addNewNote ran')\n        this.setState({ \n            notes: [ ...this.state.notes, note\n        ]})\n    };\n    \n    addNoteContent = noteContentInput => {\n        this.setState({\n            noteContentInput\n        })\n    };\n    \n    selectFolder = noteFolderSelect => {\n        this.setState({\n            noteFolderSelect\n        })\n    };\n\n    handleNoteSubmit = e => {\n        console.log('handleSubmit ran')\n        e.preventDefault()\n        const newNote = this.state.noteNameInput;\n        const newContent = this.state.noteContentInput;\n        const selectedFolder = this.state.noteFolderSelect;\n        const url = 'http://localhost:9090/notes';\n        const options = {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(\n            {\n            name: newNote,\n            folderId: selectedFolder,\n            content: newContent\n        })\n        }\n    \n        fetch(url, options)\n          .then(res => {\n            if(!res.ok) {\n              throw new Error('Something went wrong, please try again later');\n            }\n            return res.json();\n          })\n        .then(data => {\n          this.setState({\n            name: '',\n            folderId: '',\n            content: '',\n            folders: []\n          });\n          this.props.history.push('/')\n        })\n        .catch(err => {\n          this.setState({\n            error: err.message\n          });\n        });\n      }\n  \n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/notes`),\n            fetch(`${config.API_ENDPOINT}/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n\n                return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n                this.setState({notes, folders});\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n    handleDeleteNote = noteId => {\n        this.setState({\n            notes: this.state.notes.filter(note => note.id !== noteId)\n        });\n    };\n\n    renderNavRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageMain} />\n\n                <Route path='/add-folder' \n                    render={(history) =>\n                    <AddFolder\n                        folderName={this.folderName}\n                        addNewFolder={this.addNewFolder}\n                        handleFolderSubmit={this.handleFolderSubmit}\n                    />}\n                />\n               <Route path='/add-note'\n                render={(history) =>\n                    <AddNote\n                    noteNameInput = {this.noteNameInput}\n                    noteContentInput = {this.noteContentInput}\n                    noteFolderSelect = {this.noteFolderSelect}\n                    noteNameInputVaild = {this.noteNameInputVaild}\n                    formVaild = {this.formValid}\n                    validationMessages = {this.validationMessages} \n                    addNewNote = {this.addNewNote }\n                    addNoteContent = {this.addNoteContent}\n                    selectFolder = {this.selectFolder}\n                    handleNoteSubmit ={this.handleNoteSubmit}\n                    \n                    /> }\n                />\n            </>\n        );\n    }\n\n    render() {\n        \n        const value = {\n            notes: this.state.notes,\n            folders: this.state.folders,\n            deleteNote: this.handleDeleteNote\n        };\n        \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}