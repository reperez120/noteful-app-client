{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/notefulorganizingreactcode-copy3/src/AddNote/AddNote.js\";\nimport React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport './AddNote.css';\nimport { format } from 'date-fns';\nimport ValidationError from './ValidationError';\nimport ApiContext from '../ApiContext';\nimport NotefulError from '../NotefulError';\nimport PropTypes from 'prop-types';\nexport default class AddNote extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      console.log('handleSubmit ran');\n      e.preventDefault();\n      const newNote = this.props.noteNameInput;\n      const newContent = this.props.noteContentInput;\n      const selectedFolder = this.props.noteFolderSelect;\n      const url = 'http://localhost:9090/notes';\n      const options = {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newNote,\n          folderId: selectedFolder,\n          content: newContent\n        })\n      };\n      fetch(url, options).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n\n        return res.json();\n      }).then(data => {\n        this.setState({\n          name: '',\n          folderId: '',\n          content: '',\n          folders: []\n        });\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n  }\n\n  // validateNoteNameInputVaild(fieldValue) {\n  //   const fieldErrors = {...this.state.validationMessages};\n  //   let hasError = false;\n  //   fieldValue = fieldValue.trim();\n  //   if(fieldValue.length === 0) {\n  //     fieldErrors.noteNameInput = 'A name is required for the note';\n  //     hasError = true;\n  //   } else {\n  //     fieldErrors.noteNameInput= '';\n  //     hasError = false;\n  //     }\n  //   this.setState({\n  //     validationMessages: fieldErrors,\n  //     noteNameInputVaild: !hasError\n  //   }, this.formValid );\n  // }\n  //   formValid() {\n  //     this.setState({\n  //       formValid: this.state.noteNameInputValid\n  //     });\n  //   }\n  render() {\n    const _this$context$folders = this.context.folders,\n          folders = _this$context$folders === void 0 ? [] : _this$context$folders;\n    return React.createElement(\"section\", {\n      className: \"AddNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(NotefulError, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Create a note\"), React.createElement(NotefulForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"note-name-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"noteNameInput\",\n      name: \"noteNameInput\",\n      onChange: e => this.props.addNewNote(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"note-content-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Content\"), React.createElement(\"textarea\", {\n      id: \"noteContentInput\",\n      name: \"noteContentInput\",\n      onChange: e => this.addNoteContent(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"note-folder-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Folder\"), React.createElement(\"select\", {\n      id: \"noteFolderSelect\",\n      name: \"noteFolderSelect\",\n      onChange: e => this.selectFolder(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"...\"), folders.map(folder => React.createElement(\"option\", {\n      key: folder.id,\n      value: folder.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, folder.name)))), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Add note\")))));\n  } // AddNote.propTypes = {\n  //   noteNameInput: PropTypes.string.isRequired\n  // };\n\n\n} // disabled={!this.state.formValid}>\n\nAddNote.contextType = ApiContext;","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/notefulorganizingreactcode-copy3/src/AddNote/AddNote.js"],"names":["React","Component","NotefulForm","format","ValidationError","ApiContext","NotefulError","PropTypes","AddNote","handleSubmit","e","console","log","preventDefault","newNote","props","noteNameInput","newContent","noteContentInput","selectedFolder","noteFolderSelect","url","options","method","headers","body","JSON","stringify","name","folderId","content","fetch","then","res","ok","Error","json","data","setState","folders","catch","err","error","message","render","context","addNewNote","target","value","addNoteContent","selectFolder","map","folder","id","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport './AddNote.css';\nimport { format } from 'date-fns';\nimport ValidationError from './ValidationError';\nimport ApiContext from '../ApiContext';\nimport NotefulError from '../NotefulError'\nimport PropTypes from 'prop-types';\n\nexport default class AddNote extends Component {\n\n  handleSubmit = e => {\n    console.log('handleSubmit ran')\n    e.preventDefault()\n    const newNote = this.props.noteNameInput;\n    const newContent = this.props.noteContentInput;\n    const selectedFolder = this.props.noteFolderSelect;\n    const url = 'http://localhost:9090/notes';\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(\n        {\n        name: newNote,\n        folderId: selectedFolder,\n        content: newContent\n    })\n    }\n\n    fetch(url, options)\n      .then(res => {\n        if(!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n        return res.json();\n      })\n    .then(data => {\n      this.setState({\n        name: '',\n        folderId: '',\n        content: '',\n        folders: []\n      });\n    })\n    .catch(err => {\n      this.setState({\n        error: err.message\n      });\n    });\n  }\n\n  static contextType = ApiContext;\n\n  // validateNoteNameInputVaild(fieldValue) {\n  //   const fieldErrors = {...this.state.validationMessages};\n  //   let hasError = false;\n\n  //   fieldValue = fieldValue.trim();\n  //   if(fieldValue.length === 0) {\n  //     fieldErrors.noteNameInput = 'A name is required for the note';\n  //     hasError = true;\n  //   } else {\n  //     fieldErrors.noteNameInput= '';\n  //     hasError = false;\n  //     }\n  //   this.setState({\n  //     validationMessages: fieldErrors,\n  //     noteNameInputVaild: !hasError\n  //   }, this.formValid );\n  // }\n  //   formValid() {\n  //     this.setState({\n  //       formValid: this.state.noteNameInputValid\n  //     });\n  //   }\n  \n  render() {\n    const { folders=[] } = this.context\n    return (\n      <section className='AddNote'>\n        <NotefulError>\n          <h2>Create a note</h2>\n          <NotefulForm onSubmit={this.handleSubmit}>\n            <div className='field'>\n              <label htmlFor='note-name-input'>\n                Name\n              </label>\n              <input type='text' id='noteNameInput' name='noteNameInput' onChange={e => this.props.addNewNote(e.target.value)}/>\n              {/* <ValidationError hasError={!this.state.noteNameInputVaild} message={this.state.validationMessages.noteNameInput}/> */}\n            </div>\n            <div className='field'>\n              <label htmlFor='note-content-input'>\n                Content\n              </label>\n              <textarea id='noteContentInput' name='noteContentInput' onChange={e => this.addNoteContent(e.target.value)}/>\n            </div>\n            <div className='field'>\n              <label htmlFor='note-folder-select'>\n                Folder\n              </label>\n              <select id='noteFolderSelect' name='noteFolderSelect' onChange={e => this.selectFolder(e.target.value)}>\n                <option value={null}>...</option>\n                {folders.map(folder =>\n                  <option key={folder.id} value={folder.id}>\n                    {folder.name}\n                  </option>\n                )}\n              </select>\n            </div>\n            <div className='buttons'>\n              <button type='submit'>\n                Add note\n              </button>\n            </div>\n          </NotefulForm>\n        </NotefulError>\n      </section>\n    )\n  }\n\n  // AddNote.propTypes = {\n  //   noteNameInput: PropTypes.string.isRequired\n  // };\n\n}\n\n// disabled={!this.state.formValid}>\n\n\n"]},"metadata":{},"sourceType":"module"}