{"ast":null,"code":"import _objectSpread from \"/Users/rachelemilyperez/projects/notefulorganizingreactcode-copy2/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rachelemilyperez/projects/notefulorganizingreactcode-copy2/src/AddNote/AddNote.js\";\nimport React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport './AddNote.css';\nimport { format } from 'date-fns';\nimport ValidationError from './ValidationError';\nimport ApiContext from '../ApiContext';\nimport NotefulError from '../NotefulError';\nexport default class AddNote extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      console.log('handleSubmit ran');\n      e.preventDefault();\n      const newNote = this.state.noteNameInput;\n      const newContent = this.state.noteContentInput;\n      const selectedFolder = this.state.noteFolderSelect;\n      const url = 'http://localhost:9090/notes';\n      const options = {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newNote,\n          folderId: selectedFolder,\n          content: newContent\n        })\n      };\n      fetch(url, options).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n\n        return res.json();\n      }).then(data => {\n        this.setState({\n          name: '',\n          folderId: '',\n          content: '',\n          folders: []\n        });\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.state = {\n      noteNameInput: '',\n      noteContentInput: '',\n      noteFolderSelect: '',\n      dateModifid: '',\n      noteNameInputVaild: false,\n      formValid: false,\n      validationMessages: {\n        noteNameInput: ''\n      }\n    };\n  }\n\n  addNewNote(noteNameInput) {\n    console.log('addNewNote ran');\n    this.setState({\n      noteNameInput\n    }, () => {\n      this.validatenoteNameInputVaild(oteNameInput);\n    });\n  }\n\n  addNoteContent(noteContentInput) {\n    console.log('addNoteContent ran');\n    this.setState({\n      noteContentInput\n    });\n    console.log(this.state);\n  }\n\n  selectFolder(noteFolderSelect) {\n    this.setState({\n      noteFolderSelect\n    });\n  } // setDate(dateModified) {\n  //   this.setState\n  // }\n\n\n  validatenoteNameInputVaild(fieldValue) {\n    const fieldErrors = _objectSpread({}, this.state.validationMessages);\n\n    let hasError = false;\n    fieldValue = fieldValue.trim();\n\n    if (fieldValue.length === 0) {\n      fieldErrors.noteNameInput = 'A name is required for the note';\n      hasError = true;\n    } else {\n      fieldErrors.noteNameInput = '';\n      hasError = false;\n    }\n\n    this.setState({\n      validationMessages: fieldErrors,\n      noteNameInputVaild: !hasError\n    }, this.formValid);\n  }\n\n  formValid() {\n    this.setState({\n      formValid: this.state.nameNameInputValid\n    });\n  }\n\n  render() {\n    const _this$context$folders = this.context.folders,\n          folders = _this$context$folders === void 0 ? [] : _this$context$folders;\n    return React.createElement(\"section\", {\n      className: \"AddNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(NotefulError, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Create a note\"), React.createElement(NotefulForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"note-name-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"noteNameInput\",\n      name: \"noteNameInput\",\n      onChange: e => this.addNewNote(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(ValidationError, {\n      hasError: !this.state.noteNameInputVaild,\n      message: this.state.validationMessages.noteNameInpu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"note-content-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Content\"), React.createElement(\"textarea\", {\n      id: \"noteContentInput\",\n      name: \"noteContentInput\",\n      onChange: e => this.addNoteContent(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"note-folder-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Folder\"), React.createElement(\"select\", {\n      id: \"noteFolderSelect\",\n      name: \"noteFolderSelect\",\n      onChange: e => this.selectFolder(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"...\"), folders.map(folder => React.createElement(\"option\", {\n      key: folder.id,\n      value: folder.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, folder.name)))), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Add note\")))));\n  }\n\n}\nAddNote.contextType = ApiContext;","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/notefulorganizingreactcode-copy2/src/AddNote/AddNote.js"],"names":["React","Component","NotefulForm","format","ValidationError","ApiContext","NotefulError","AddNote","constructor","props","handleSubmit","e","console","log","preventDefault","newNote","state","noteNameInput","newContent","noteContentInput","selectedFolder","noteFolderSelect","url","options","method","headers","body","JSON","stringify","name","folderId","content","fetch","then","res","ok","Error","json","data","setState","folders","catch","err","error","message","dateModifid","noteNameInputVaild","formValid","validationMessages","addNewNote","validatenoteNameInputVaild","oteNameInput","addNoteContent","selectFolder","fieldValue","fieldErrors","hasError","trim","length","nameNameInputValid","render","context","target","value","noteNameInpu","map","folder","id","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport './AddNote.css';\nimport { format } from 'date-fns';\nimport ValidationError from './ValidationError';\nimport ApiContext from '../ApiContext';\nimport NotefulError from '../NotefulError'\n\nexport default class AddNote extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteNameInput: '',\n      noteContentInput:'',\n      noteFolderSelect: '',\n      dateModifid: '',\n      noteNameInputVaild: false,\n      formValid: false,\n      validationMessages: {\n        noteNameInput: ''\n      }\n    }\n  }\n\n  addNewNote(noteNameInput) {\n    console.log('addNewNote ran')\n    this.setState({noteNameInput}, () => {this.validatenoteNameInputVaild(oteNameInput)});\n  }\n\n  addNoteContent(noteContentInput) {\n    console.log('addNoteContent ran')\n    this.setState({noteContentInput})\n\n    console.log(this.state)\n  }\n\n  selectFolder(noteFolderSelect) {\n    this.setState({noteFolderSelect})\n  }\n\n  // setDate(dateModified) {\n  //   this.setState\n  // }\n\n  handleSubmit = e => {\n    console.log('handleSubmit ran')\n    e.preventDefault()\n    const newNote = this.state.noteNameInput;\n    const newContent = this.state.noteContentInput;\n    const selectedFolder = this.state.noteFolderSelect;\n    const url = 'http://localhost:9090/notes';\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(\n        {\n        name: newNote,\n        folderId: selectedFolder,\n        content: newContent\n    })\n    }\n\n    fetch(url, options)\n      .then(res => {\n        if(!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n        return res.json();\n      })\n    .then(data => {\n      this.setState({\n        name: '',\n        folderId: '',\n        content: '',\n        folders: []\n      });\n    })\n    .catch(err => {\n      this.setState({\n        error: err.message\n      });\n    });\n  }\n\n  static contextType = ApiContext;\n\n  validatenoteNameInputVaild(fieldValue) {\n    const fieldErrors = {...this.state.validationMessages};\n    let hasError = false;\n\n    fieldValue = fieldValue.trim();\n    if(fieldValue.length === 0) {\n      fieldErrors.noteNameInput = 'A name is required for the note';\n      hasError = true;\n    } else {\n      fieldErrors.noteNameInput= '';\n      hasError = false;\n      }\n    \n    this.setState({\n      validationMessages: fieldErrors,\n      noteNameInputVaild: !hasError\n    }, this.formValid );\n  }\n  \n    formValid() {\n      this.setState({\n        formValid: this.state.nameNameInputValid\n      });\n    }\n  \n  render() {\n    const { folders=[] } = this.context\n    return (\n      <section className='AddNote'>\n        <NotefulError>\n          <h2>Create a note</h2>\n          <NotefulForm onSubmit={this.handleSubmit}>\n            <div className='field'>\n              <label htmlFor='note-name-input'>\n                Name\n              </label>\n              <input type='text' id='noteNameInput' name='noteNameInput' onChange={e => this.addNewNote(e.target.value)}/>\n              <ValidationError hasError={!this.state.noteNameInputVaild} message={this.state.validationMessages.noteNameInpu}/>\n            </div>\n            <div className='field'>\n              <label htmlFor='note-content-input'>\n                Content\n              </label>\n              <textarea id='noteContentInput' name='noteContentInput' onChange={e => this.addNoteContent(e.target.value)}/>\n            </div>\n            <div className='field'>\n              <label htmlFor='note-folder-select'>\n                Folder\n              </label>\n              <select id='noteFolderSelect' name='noteFolderSelect' onChange={e => this.selectFolder(e.target.value)}>\n                <option value={null}>...</option>\n                {folders.map(folder =>\n                  <option key={folder.id} value={folder.id}>\n                    {folder.name}\n                  </option>\n                )}\n              </select>\n            </div>\n            <div className='buttons'>\n              <button type='submit'>\n                Add note\n              </button>\n            </div>\n          </NotefulForm>\n        </NotefulError>\n      </section>\n    )\n  }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}