{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/noteful-app-state-copy/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport NotefulError from '../NotefulError';\nimport './App.css';\nimport { throws } from 'assert';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      folders: [] // error: null,\n      // folderName: '',\n      // noteNameInput: '',\n      // noteContentInput:'',\n      // noteFolderSelect: '',\n      // noteNameInputVaild: false,\n      // formValid: false,\n      // validationMessages: {\n      // noteNameInput: ''\n      // },\n\n    };\n\n    this.addNewFolder = folder => {\n      console.log(this.state);\n      this.setState({\n        folders: [...this.state.folders, folder]\n      });\n      console.log(this.state);\n    };\n\n    this.addNewNote = note => {\n      console.log('addNewNote ran');\n      this.setState({\n        notes: [...this.state.notes, note]\n      });\n    };\n\n    this.addNoteContent = noteContentInput => {\n      this.setState({\n        noteContentInput\n      });\n    };\n\n    this.selectFolder = noteFolderSelect => {\n      this.setState({\n        noteFolderSelect\n      });\n    };\n\n    this.handleNoteSubmit = e => {\n      console.log('handleSubmit ran');\n      e.preventDefault();\n      const newNote = this.state.noteNameInput;\n      const newContent = this.state.noteContentInput;\n      const selectedFolder = this.state.noteFolderSelect;\n      const url = 'http://localhost:9090/notes';\n      const options = {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newNote,\n          folderId: selectedFolder,\n          content: newContent\n        })\n      };\n      fetch(url, options).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later');\n        }\n\n        return res.json();\n      }).then(data => {\n        //   this.setState({\n        //     name: '',\n        //     folderId: '',\n        //     content: '',\n        //     folders: []\n        //   });\n        this.props.history.push('/');\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.handleDeleteNote = noteId => {\n      this.setState({\n        notes: this.state.notes.filter(note => note.id !== noteId)\n      });\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      this.setState({\n        notes,\n        folders\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: history => React.createElement(AddFolder, {\n        folderName: this.folderName,\n        addNewFolder: this.addNewFolder,\n        handleFolderSubmit: this.handleFolderSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: history => React.createElement(AddNote, {\n        noteNameInput: this.noteNameInput,\n        noteContentInput: this.noteContentInput,\n        noteFolderSelect: this.noteFolderSelect,\n        noteNameInputVaild: this.noteNameInputVaild,\n        formVaild: this.formValid,\n        validationMessages: this.validationMessages,\n        addNewNote: this.addNewNote,\n        addNoteContent: this.addNoteContent,\n        selectFolder: this.selectFolder,\n        handleNoteSubmit: this.handleNoteSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/noteful-app-state-copy/src/App/App.js"],"names":["React","Component","Route","Link","withRouter","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","ApiContext","config","NotefulError","throws","App","state","notes","folders","addNewFolder","folder","console","log","setState","addNewNote","note","addNoteContent","noteContentInput","selectFolder","noteFolderSelect","handleNoteSubmit","e","preventDefault","newNote","noteNameInput","newContent","selectedFolder","url","options","method","headers","body","JSON","stringify","name","folderId","content","fetch","then","res","ok","Error","json","data","props","history","push","catch","err","error","message","handleDeleteNote","noteId","filter","id","componentDidMount","Promise","all","API_ENDPOINT","notesRes","foldersRes","reject","renderNavRoutes","map","path","renderMainRoutes","folderName","handleFolderSubmit","noteNameInputVaild","formValid","validationMessages","render","value","deleteNote"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,KAAR,EAAeC,IAAf,QAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAO,WAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,MAAMC,GAAN,SAAkBd,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBe,KAFwB,GAEhB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE,EAFL,CAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAZI,KAFgB;;AAAA,SAiBxBC,YAjBwB,GAiBTC,MAAM,IAAI;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACA,WAAKO,QAAL,CAAc;AACVL,QAAAA,OAAO,EAAE,CAAE,GAAG,KAAKF,KAAL,CAAWE,OAAhB,EAAyBE,MAAzB;AADC,OAAd;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACH,KAvBuB;;AAAA,SA2DxBQ,UA3DwB,GA2DXC,IAAI,IAAI;AACjBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKC,QAAL,CAAc;AACVN,QAAAA,KAAK,EAAE,CAAE,GAAG,KAAKD,KAAL,CAAWC,KAAhB,EAAuBQ,IAAvB;AADG,OAAd;AAGH,KAhEuB;;AAAA,SAkExBC,cAlEwB,GAkEPC,gBAAgB,IAAI;AACjC,WAAKJ,QAAL,CAAc;AACVI,QAAAA;AADU,OAAd;AAGH,KAtEuB;;AAAA,SAwExBC,YAxEwB,GAwETC,gBAAgB,IAAI;AAC/B,WAAKN,QAAL,CAAc;AACVM,QAAAA;AADU,OAAd;AAGH,KA5EuB;;AAAA,SA8ExBC,gBA9EwB,GA8ELC,CAAC,IAAI;AACpBV,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAS,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,OAAO,GAAG,KAAKjB,KAAL,CAAWkB,aAA3B;AACA,YAAMC,UAAU,GAAG,KAAKnB,KAAL,CAAWW,gBAA9B;AACA,YAAMS,cAAc,GAAG,KAAKpB,KAAL,CAAWa,gBAAlC;AACA,YAAMQ,GAAG,GAAG,6BAAZ;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,MADM;AAEdC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFK;AAKdC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACJ;AACAC,UAAAA,IAAI,EAAEX,OADN;AAEAY,UAAAA,QAAQ,EAAET,cAFV;AAGAU,UAAAA,OAAO,EAAEX;AAHT,SADI;AALQ,OAAhB;AAaAY,MAAAA,KAAK,CAACV,GAAD,EAAMC,OAAN,CAAL,CACGU,IADH,CACQC,GAAG,IAAI;AACX,YAAG,CAACA,GAAG,CAACC,EAAR,EAAY;AACV,gBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OANH,EAOCJ,IAPD,CAOMK,IAAI,IAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACE,aAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,OAfD,EAgBCC,KAhBD,CAgBOC,GAAG,IAAI;AACZ,aAAKnC,QAAL,CAAc;AACZoC,UAAAA,KAAK,EAAED,GAAG,CAACE;AADC,SAAd;AAGD,OApBD;AAqBD,KAvHqB;;AAAA,SA8IxBC,gBA9IwB,GA8ILC,MAAM,IAAI;AACzB,WAAKvC,QAAL,CAAc;AACVN,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiB8C,MAAjB,CAAwBtC,IAAI,IAAIA,IAAI,CAACuC,EAAL,KAAYF,MAA5C;AADG,OAAd;AAGH,KAlJuB;AAAA;;AAyHxBG,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,CACRpB,KAAK,WAAInC,MAAM,CAACwD,YAAX,YADG,EAERrB,KAAK,WAAInC,MAAM,CAACwD,YAAX,cAFG,CAAZ,EAIKpB,IAJL,CAIU,CAAC,CAACqB,QAAD,EAAWC,UAAX,CAAD,KAA4B;AAC9B,UAAI,CAACD,QAAQ,CAACnB,EAAd,EACI,OAAOmB,QAAQ,CAACjB,IAAT,GAAgBJ,IAAhB,CAAqBjB,CAAC,IAAImC,OAAO,CAACK,MAAR,CAAexC,CAAf,CAA1B,CAAP;AACJ,UAAI,CAACuC,UAAU,CAACpB,EAAhB,EACI,OAAOoB,UAAU,CAAClB,IAAX,GAAkBJ,IAAlB,CAAuBjB,CAAC,IAAImC,OAAO,CAACK,MAAR,CAAexC,CAAf,CAA5B,CAAP;AAEJ,aAAOmC,OAAO,CAACC,GAAR,CAAY,CAACE,QAAQ,CAACjB,IAAT,EAAD,EAAkBkB,UAAU,CAAClB,IAAX,EAAlB,CAAZ,CAAP;AACH,KAXL,EAYKJ,IAZL,CAYU,CAAC,CAAC/B,KAAD,EAAQC,OAAR,CAAD,KAAsB;AACxB,WAAKK,QAAL,CAAc;AAACN,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAd;AACH,KAdL,EAeKuC,KAfL,CAeWE,KAAK,IAAI;AACZtC,MAAAA,OAAO,CAACsC,KAAR,CAAc;AAACA,QAAAA;AAAD,OAAd;AACH,KAjBL;AAkBH;;AAQDa,EAAAA,eAAe,GAAG;AACd,WACI,0CACK,CAAC,GAAD,EAAM,mBAAN,EAA2BC,GAA3B,CAA+BC,IAAI,IAChC,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,GAAG,EAAEA,IAFT;AAGI,MAAA,IAAI,EAAEA,IAHV;AAII,MAAA,SAAS,EAAErE,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,EASI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,eAAZ;AAA4B,MAAA,SAAS,EAAEC,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEA,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EAWI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,SAAS,EAAEA,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ;AAeH;;AAEDqE,EAAAA,gBAAgB,GAAG;AACf,WACI,0CACK,CAAC,GAAD,EAAM,mBAAN,EAA2BF,GAA3B,CAA+BC,IAAI,IAChC,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,GAAG,EAAEA,IAFT;AAGI,MAAA,IAAI,EAAEA,IAHV;AAII,MAAA,SAAS,EAAEnE,YAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,EASI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,eAAZ;AAA4B,MAAA,SAAS,EAAEC,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAWI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AACI,MAAA,MAAM,EAAG+C,OAAD,IACR,oBAAC,SAAD;AACI,QAAA,UAAU,EAAE,KAAKqB,UADrB;AAEI,QAAA,YAAY,EAAE,KAAKzD,YAFvB;AAGI,QAAA,kBAAkB,EAAE,KAAK0D,kBAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAmBG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AACC,MAAA,MAAM,EAAGtB,OAAD,IACJ,oBAAC,OAAD;AACA,QAAA,aAAa,EAAI,KAAKrB,aADtB;AAEA,QAAA,gBAAgB,EAAI,KAAKP,gBAFzB;AAGA,QAAA,gBAAgB,EAAI,KAAKE,gBAHzB;AAIA,QAAA,kBAAkB,EAAI,KAAKiD,kBAJ3B;AAKA,QAAA,SAAS,EAAI,KAAKC,SALlB;AAMA,QAAA,kBAAkB,EAAI,KAAKC,kBAN3B;AAOA,QAAA,UAAU,EAAI,KAAKxD,UAPnB;AAQA,QAAA,cAAc,EAAI,KAAKE,cARvB;AASA,QAAA,YAAY,EAAI,KAAKE,YATrB;AAUA,QAAA,gBAAgB,EAAG,KAAKE,gBAVxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBH,CADJ;AAsCH;;AAEDmD,EAAAA,MAAM,GAAG;AAEL,UAAMC,KAAK,GAAG;AACVjE,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KADR;AAEVC,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,OAFV;AAGViE,MAAAA,UAAU,EAAE,KAAKtB;AAHP,KAAd;AAMA,WACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAEqB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKV,eAAL,EAA3B,CADJ,EAEI;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EACgC,GADhC,CADJ,CAFJ,EAOI;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,KAAKG,gBAAL,EAA7B,CAPJ,CADJ,CADJ;AAaH;;AApOuB;;AAuO5B,eAAevE,UAAU,CAACW,GAAD,CAAzB","sourcesContent":["import React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom'\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport NotefulError from '../NotefulError';\nimport './App.css';\nimport { throws } from 'assert';\n\nclass App extends Component {\n\n    state = {\n        notes: [],\n        folders: [],\n        // error: null,\n        // folderName: '',\n        // noteNameInput: '',\n        // noteContentInput:'',\n        // noteFolderSelect: '',\n        // noteNameInputVaild: false,\n        // formValid: false,\n        // validationMessages: {\n        // noteNameInput: ''\n        // },\n    };\n\n    addNewFolder = folder => {\n        console.log(this.state)\n        this.setState({ \n            folders: [ ...this.state.folders, folder \n        ]})\n        console.log(this.state)\n    }\n  \n    // handleFolderSubmit = e => {\n    //     console.log('handleSubmit ran')\n    //     e.preventDefault()\n    //     const newFolder = this.state.folderName;\n    //     const url = 'http://localhost:9090/folders';\n    //     const options = {\n    //     method: 'POST',\n    //     headers: {\n    //         'content-type': 'application/json'\n    //     },\n    //     body: JSON.stringify (\n    //         {name: newFolder\n    //         }),\n    // }\n    \n    // fetch(url, options)\n    //   .then(res => {\n    //     if(!res.ok) {\n    //       throw new Error('Something went wrong, please try again later');\n    //     }\n    //     return res.json();\n    //   })\n    //   .then(data => {     \n    //     this.addNewFolder({name: newFolder, id: data.id});\n    //     console.log(data)\n    //     this.props.history.push('/')\n    //   })\n    //   .catch(err => {\n    //     this.setState({\n    //       error: err.message\n    //     });\n    //   })\n    // }\n    \n    addNewNote = note => {\n        console.log('addNewNote ran')\n        this.setState({ \n            notes: [ ...this.state.notes, note\n        ]})\n    };\n    \n    addNoteContent = noteContentInput => {\n        this.setState({\n            noteContentInput\n        })\n    };\n    \n    selectFolder = noteFolderSelect => {\n        this.setState({\n            noteFolderSelect\n        })\n    };\n\n    handleNoteSubmit = e => {\n        console.log('handleSubmit ran')\n        e.preventDefault()\n        const newNote = this.state.noteNameInput;\n        const newContent = this.state.noteContentInput;\n        const selectedFolder = this.state.noteFolderSelect;\n        const url = 'http://localhost:9090/notes';\n        const options = {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(\n            {\n            name: newNote,\n            folderId: selectedFolder,\n            content: newContent\n        })\n        }\n    \n        fetch(url, options)\n          .then(res => {\n            if(!res.ok) {\n              throw new Error('Something went wrong, please try again later');\n            }\n            return res.json();\n          })\n        .then(data => {\n        //   this.setState({\n        //     name: '',\n        //     folderId: '',\n        //     content: '',\n        //     folders: []\n        //   });\n          this.props.history.push('/')\n        })\n        .catch(err => {\n          this.setState({\n            error: err.message\n          });\n        });\n      }\n  \n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/notes`),\n            fetch(`${config.API_ENDPOINT}/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n\n                return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n                this.setState({notes, folders});\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n    handleDeleteNote = noteId => {\n        this.setState({\n            notes: this.state.notes.filter(note => note.id !== noteId)\n        });\n    };\n\n    renderNavRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageMain} />\n\n                <Route path='/add-folder' \n                    render={(history) =>\n                    <AddFolder\n                        folderName={this.folderName}\n                        addNewFolder={this.addNewFolder}\n                        handleFolderSubmit={this.handleFolderSubmit}\n                    />}\n                />\n               <Route path='/add-note'\n                render={(history) =>\n                    <AddNote\n                    noteNameInput = {this.noteNameInput}\n                    noteContentInput = {this.noteContentInput}\n                    noteFolderSelect = {this.noteFolderSelect}\n                    noteNameInputVaild = {this.noteNameInputVaild}\n                    formVaild = {this.formValid}\n                    validationMessages = {this.validationMessages} \n                    addNewNote = {this.addNewNote }\n                    addNoteContent = {this.addNoteContent}\n                    selectFolder = {this.selectFolder}\n                    handleNoteSubmit ={this.handleNoteSubmit}\n                    \n                    /> }\n                />\n            </>\n        );\n    }\n\n    render() {\n        \n        const value = {\n            notes: this.state.notes,\n            folders: this.state.folders,\n            deleteNote: this.handleDeleteNote\n        };\n        \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}