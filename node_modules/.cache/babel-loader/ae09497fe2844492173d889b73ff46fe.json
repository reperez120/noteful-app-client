{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/notefulorganizingreactcode-app-state/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport NotefulError from '../NotefulError';\nimport './App.css';\nimport { throws } from 'assert';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      folders: [],\n      folderName: '',\n      noteNameInput: '',\n      noteContentInput: '',\n      noteFolderSelect: '',\n      noteNameInputVaild: false,\n      formValid: false,\n      validationMessages: {\n        noteNameInput: ''\n      }\n    };\n\n    this.addNewFolder = folderName => {\n      this.setState({\n        folderName\n      });\n    };\n\n    this.handleFolderSubmit = e => {\n      e.preventDefault();\n      const newFolder = this.props.folderName;\n      const url = 'http://localhost:9090/folders';\n      const options = {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newFolder\n        })\n      };\n    };\n\n    this.addNewNote = noteNameInput => {\n      console.log('addNewNote ran');\n      this.setState({\n        noteNameInput\n      }, () => {\n        this.validateNoteNameInputVaild(noteNameInput);\n      });\n    };\n\n    this.handleDeleteNote = noteId => {\n      this.setState({\n        notes: this.state.notes.filter(note => note.id !== noteId)\n      });\n    };\n  }\n\n  // addNoteContent = noteContentInput => {\n  //     this.setState({\n  //         noteContentInput\n  //     })\n  // };\n  // selectFolder = noteFolderSelect => {\n  //     this.setState({\n  //         noteFolderSelect\n  //     })\n  // };\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      this.setState({\n        notes,\n        folders\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      render: () => React.createElement(AddFolder, {\n        folderName: this.folderName,\n        addNewFolder: this.addNewFolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      render: () => React.createElement(AddNote, {\n        noteNameInput: this.noteNameInput,\n        noteContentInput: this.noteContentInput,\n        noteFolderSelect: this.noteFolderSelect,\n        noteNameInputVaild: this.noteNameInputVaild,\n        formVaild: this.formValid,\n        validationMessages: this.validationMessages,\n        addNewNote: this.addNewNote,\n        addNoteContent: this.addNoteContent,\n        selectFolder: this.selectFolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/notefulorganizingreactcode-app-state/src/App/App.js"],"names":["React","Component","Route","Link","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","ApiContext","config","NotefulError","throws","App","state","notes","folders","folderName","noteNameInput","noteContentInput","noteFolderSelect","noteNameInputVaild","formValid","validationMessages","addNewFolder","setState","handleFolderSubmit","e","preventDefault","newFolder","props","url","options","method","headers","body","JSON","stringify","name","addNewNote","console","log","validateNoteNameInputVaild","handleDeleteNote","noteId","filter","note","id","componentDidMount","Promise","all","fetch","API_ENDPOINT","then","notesRes","foldersRes","ok","json","reject","catch","error","renderNavRoutes","map","path","renderMainRoutes","addNoteContent","selectFolder","render","value","deleteNote"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport NotefulError from '../NotefulError';\nimport './App.css';\nimport { throws } from 'assert';\n\nexport default class App extends Component {\n\n    state = {\n        notes: [],\n        folders: [],\n        folderName: '',\n        noteNameInput: '',\n        noteContentInput:'',\n        noteFolderSelect: '',\n        noteNameInputVaild: false,\n        formValid: false,\n        validationMessages: {\n        noteNameInput: ''\n        },\n    };\n\n    addNewFolder = folderName => {\n        this.setState({\n            folderName\n        })\n    };\n\n    // validateNoteNameInputVaild(fieldValue) {\n    //     const fieldErrors = {...this.state.validationMessages};\n    //     let hasError = false;\n    \n    //     fieldValue = fieldValue.trim();\n    //     if(fieldValue.length === 0) {\n    //       fieldErrors.noteNameInput = 'A name is required for the note';\n    //       hasError = true;\n    //     } else {\n    //       fieldErrors.noteNameInput= '';\n    //       hasError = false;\n    //       }\n    //     this.setState({\n    //       validationMessages: fieldErrors,\n    //       noteNameInputVaild: !hasError\n    //     }, this.formValid );\n    //     }\n    //     formValid() {\n    //       this.setState({\n    //         formValid: this.state.noteNameInputValid\n    //       });\n    //     } \n    // };\n    \n    handleFolderSubmit = e => {\n        e.preventDefault()\n        const newFolder = this.props.folderName;\n        const url = 'http://localhost:9090/folders';\n        const options = {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify (\n            {name: newFolder\n            }),\n        }\n    };\n        \n    addNewNote = noteNameInput => {\n        console.log('addNewNote ran')\n        this.setState({\n            noteNameInput}, () => \n            {this.validateNoteNameInputVaild(noteNameInput)});\n    };\n    \n    // addNoteContent = noteContentInput => {\n    //     this.setState({\n    //         noteContentInput\n    //     })\n    // };\n    \n    // selectFolder = noteFolderSelect => {\n    //     this.setState({\n    //         noteFolderSelect\n    //     })\n    // };\n  \n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/notes`),\n            fetch(`${config.API_ENDPOINT}/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n\n                return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n                this.setState({notes, folders});\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n    handleDeleteNote = noteId => {\n        this.setState({\n            notes: this.state.notes.filter(note => note.id !== noteId)\n        });\n    };\n\n    renderNavRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageMain} />\n\n                <Route path='/add-folder' \n                    render={() =>\n                    <AddFolder\n                        folderName={this.folderName}\n                        addNewFolder={this.addNewFolder}\n                    />}\n                />\n               <Route path='/add-note'\n                render={() =>\n                    <AddNote\n                    noteNameInput = {this.noteNameInput}\n                    noteContentInput = {this.noteContentInput}\n                    noteFolderSelect = {this.noteFolderSelect}\n                    noteNameInputVaild = {this.noteNameInputVaild}\n                    formVaild = {this.formValid}\n                    validationMessages = {this.validationMessages} \n                    addNewNote = {this.addNewNote }\n                    addNoteContent = {this.addNoteContent}\n                    selectFolder = {this.selectFolder}\n                    \n                    /> }\n                />\n            </>\n        );\n    }\n\n    render() {\n        \n        const value = {\n            notes: this.state.notes,\n            folders: this.state.folders,\n            deleteNote: this.handleDeleteNote\n        };\n        \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}