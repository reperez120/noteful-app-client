{"ast":null,"code":"var _jsxFileName = \"/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from '../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      folders: []\n    };\n\n    this.addFolder = folder => {\n      console.log('addFolder started');\n      this.setState({\n        folders: [...this.state.folders, folder]\n      });\n      console.log('addFolder completed');\n    };\n\n    this.mergeFoldersAndNotes = (folders, notes) => {\n      notes.forEach(note => {\n        const index = folders.findIndex(f => f.id === note.folder);\n\n        if (!folders[index].notes) {\n          folders[index].notes = [];\n        }\n\n        folders[index].notes.push({\n          id: note.id,\n          name: note.name,\n          content: note.content,\n          date: note.date\n        });\n      });\n      return folders;\n    };\n\n    this.addNote = (folders, note) => {\n      console.log('addNote started', folders, note);\n\n      let addNewNote = (folders, note) => {\n        console.log('addNewNote ran');\n        const i = this.state.folders.forEach(folder => folder.id === note.folderId);\n        folders[i].notes.push(note);\n        console.log(i);\n        console.log(folders);\n        console.log('addNewNote completed');\n        return folders;\n      };\n\n      console.log(addNewNote());\n      console.log('addNote ran');\n      const newFolders = addNewNote(folders, note);\n      console.log(addNewNote());\n      console.log('new folders', newFolders);\n      this.setState({\n        folders: newFolders\n      });\n      console.log('addNote completed');\n    };\n\n    this.updateFolder = updatedFolder => {\n      const newFolders = this.state.folders.map(folder => folder.id === updatedFolder.id ? updatedFolder : folder);\n      this.setState({\n        folders: newFolders\n      });\n    };\n\n    this.handleDeleteNote = id => {\n      console.log('deleteNote started');\n      return this.state.folders.map(folder => {\n        folder.notes = folder.notes.filter(note => note.id !== id);\n        console.log(folder);\n        return folder;\n        this.setState({\n          folders: folder\n        });\n        console.log(this.state);\n      });\n      console.log('deleteNote completed');\n    };\n\n    this.handleDeleteFolder = folderId => {\n      this.setState({\n        folders: this.state.folders.filter(folder => folder.id !== folderId)\n      });\n      console.log('deleteFolder ran');\n    };\n\n    this.getNotes = (folders, notes) => {\n      this.state.folders.forEach(folder => {\n        let notes = \"\".concat(folder.notes);\n        this.setState({\n          notes: notes\n        });\n      });\n    };\n\n    this.updateNote = editedNote => {\n      const newNotes = this.state.map(note => note.id === editedNote.id ? editedNote : note);\n      this.setState({\n        notes: newNotes\n      });\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch(\"\".concat(config.API_ENDPOINT, \"/api/notes\")), fetch(\"\".concat(config.API_ENDPOINT, \"/api/folders\"))]).then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok) return notesRes.json().then(e => Promise.reject(e));\n      if (!foldersRes.ok) return foldersRes.json().then(e => Promise.reject(e));\n      return Promise.all([notesRes.json(), foldersRes.json()]);\n    }).then(([notes, folders]) => {\n      const data = this.mergeFoldersAndNotes(folders, notes);\n      this.setState({\n        folders: data\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    });\n  }\n\n  renderNavRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/folder/:folderId\",\n      component: NotePageNav,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n  }\n\n  renderMainRoutes() {\n    return React.createElement(React.Fragment, null, ['/', '/folder/:folderId'].map(path => React.createElement(Route, {\n      exact: true,\n      key: path,\n      path: path,\n      component: NoteListMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/note/:noteId\",\n      component: NotePageMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-folder\",\n      component: AddFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/add-note\",\n      component: AddNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/folders/:folderId/edit\",\n      component: EditFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/notes/:noteId/edit\",\n      component: EditNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const value = {\n      folders: this.state.folders,\n      notes: this.notes,\n      deleteNote: this.handleDeleteNote,\n      deleteFolder: this.handleDeleteFolder,\n      addNote: this.addNote,\n      addFolder: this.addFolder,\n      updateFolder: this.updateFolder,\n      updateNote: this.updateNote,\n      getNotes: this.getNotes\n    };\n    return React.createElement(ApiContext.Provider, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"App__nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.renderNavRoutes()), React.createElement(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Noteful\"), ' ')), React.createElement(\"main\", {\n      className: \"App__main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, this.renderMainRoutes())));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rachelemilyperez/projects/noteful-app/noteful-app-client/src/App/App.js"],"names":["React","Component","Route","Link","withRouter","NoteListNav","NotePageNav","NoteListMain","NotePageMain","AddFolder","AddNote","EditNote","EditFolder","ApiContext","config","App","state","folders","addFolder","folder","console","log","setState","mergeFoldersAndNotes","notes","forEach","note","index","findIndex","f","id","push","name","content","date","addNote","addNewNote","i","folderId","newFolders","updateFolder","updatedFolder","map","handleDeleteNote","filter","handleDeleteFolder","getNotes","updateNote","editedNote","newNotes","componentDidMount","Promise","all","fetch","API_ENDPOINT","then","notesRes","foldersRes","ok","json","e","reject","data","catch","error","renderNavRoutes","path","renderMainRoutes","render","value","deleteNote","deleteFolder"],"mappings":";AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,KAAR,EAAeC,IAAf,QAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBd,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBe,KAFwB,GAEhB;AACJC,MAAAA,OAAO,EAAE;AADL,KAFgB;;AAAA,SAMxBC,SANwB,GAMZC,MAAM,IAAI;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAKC,QAAL,CAAc;AACVL,QAAAA,OAAO,EAAE,CAAE,GAAG,KAAKD,KAAL,CAAWC,OAAhB,EAAyBE,MAAzB;AADC,OAAd;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KAZuB;;AAAA,SAcxBE,oBAdwB,GAcD,CAACN,OAAD,EAAUO,KAAV,KAAoB;AACvCA,MAAAA,KAAK,CAACC,OAAN,CAAeC,IAAD,IAAU;AACtB,cAAMC,KAAK,GAAGV,OAAO,CAACW,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASJ,IAAI,CAACP,MAArC,CAAd;;AACA,YAAI,CAACF,OAAO,CAACU,KAAD,CAAP,CAAeH,KAApB,EAA2B;AACzBP,UAAAA,OAAO,CAACU,KAAD,CAAP,CAAeH,KAAf,GAAuB,EAAvB;AACD;;AACDP,QAAAA,OAAO,CAACU,KAAD,CAAP,CAAeH,KAAf,CAAqBO,IAArB,CAA0B;AACxBD,UAAAA,EAAE,EAAEJ,IAAI,CAACI,EADe;AAExBE,UAAAA,IAAI,EAAEN,IAAI,CAACM,IAFa;AAGxBC,UAAAA,OAAO,EAAEP,IAAI,CAACO,OAHU;AAIxBC,UAAAA,IAAI,EAAER,IAAI,CAACQ;AAJa,SAA1B;AAMC,OAXH;AAYA,aAAOjB,OAAP;AACD,KA5BqB;;AAAA,SA8BxBkB,OA9BwB,GA8Bd,CAAClB,OAAD,EAAUS,IAAV,KAAmB;AACzBN,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,OAA/B,EAAwCS,IAAxC;;AACA,UAAIU,UAAU,GAAG,CAACnB,OAAD,EAAUS,IAAV,KAAmB;AAChCN,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,cAAMgB,CAAC,GAAG,KAAKrB,KAAL,CAAWC,OAAX,CAAmBQ,OAAnB,CAA2BN,MAAM,IAAIA,MAAM,CAACW,EAAP,KAAcJ,IAAI,CAACY,QAAxD,CAAV;AACArB,QAAAA,OAAO,CAACoB,CAAD,CAAP,CAAWb,KAAX,CAAiBO,IAAjB,CAAsBL,IAAtB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYgB,CAAZ;AACAjB,QAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,eAAOJ,OAAP;AACH,OARD;;AASAG,MAAAA,OAAO,CAACC,GAAR,CAAYe,UAAU,EAAtB;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMkB,UAAU,GAAGH,UAAU,CAACnB,OAAD,EAAUS,IAAV,CAA7B;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYe,UAAU,EAAtB;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BkB,UAA3B;AACA,WAAKjB,QAAL,CAAc;AACVL,QAAAA,OAAO,EAAEsB;AADC,OAAd;AAGAnB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACF,KAlDsB;;AAAA,SAoDxBmB,YApDwB,GAoDTC,aAAa,IAAI;AAC5B,YAAMF,UAAU,GAAG,KAAKvB,KAAL,CAAWC,OAAX,CAAmByB,GAAnB,CAAuBvB,MAAM,IAC7CA,MAAM,CAACW,EAAP,KAAcW,aAAa,CAACX,EAA7B,GACIW,aADJ,GAEItB,MAHa,CAAnB;AAKA,WAAKG,QAAL,CAAc;AACdL,QAAAA,OAAO,EAAEsB;AADK,OAAd;AAGH,KA7DuB;;AAAA,SA+DxBI,gBA/DwB,GA+DLb,EAAE,IAAI;AACrBV,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,aAAO,KAAKL,KAAL,CAAWC,OAAX,CAAmByB,GAAnB,CAAuBvB,MAAM,IAAI;AACtCA,QAAAA,MAAM,CAACK,KAAP,GAAeL,MAAM,CAACK,KAAP,CAAaoB,MAAb,CAAoBlB,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAAxC,CAAf;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,eAAOA,MAAP;AACA,aAAKG,QAAL,CAAc;AAAEL,UAAAA,OAAO,EAAEE;AAAX,SAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACD,OANM,CAAP;AAOAI,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAzEqB;;AAAA,SA2ExBwB,kBA3EwB,GA2EHP,QAAQ,IAAI;AAC7B,WAAKhB,QAAL,CAAc;AACVL,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,CAAmB2B,MAAnB,CAA0BzB,MAAM,IAAIA,MAAM,CAACW,EAAP,KAAcQ,QAAlD;AADC,OAAd;AAGAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,KAhFuB;;AAAA,SAkFxByB,QAlFwB,GAkFb,CAAC7B,OAAD,EAAUO,KAAV,KAAoB;AAC3B,WAAKR,KAAL,CAAWC,OAAX,CAAmBQ,OAAnB,CAA4BN,MAAD,IAAY;AACvC,YAAIK,KAAK,aAAML,MAAM,CAACK,KAAb,CAAT;AACA,aAAKF,QAAL,CAAe;AACXE,UAAAA,KAAK,EAAEA;AADI,SAAf;AAGD,OALC;AAMH,KAzFuB;;AAAA,SAkHxBuB,UAlHwB,GAkHXC,UAAU,IAAK;AACxB,YAAMC,QAAQ,GAAG,KAAKjC,KAAL,CAAW0B,GAAX,CAAehB,IAAI,IAC/BA,IAAI,CAACI,EAAL,KAAYkB,UAAU,CAAClB,EAAxB,GACEkB,UADF,GAEEtB,IAHW,CAAjB;AAKA,WAAKJ,QAAL,CAAc;AACVE,QAAAA,KAAK,EAAEyB;AADG,OAAd;AAGH,KA3HuB;AAAA;;AA2FxBC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,CACRC,KAAK,WAAIvC,MAAM,CAACwC,YAAX,gBADG,EAERD,KAAK,WAAIvC,MAAM,CAACwC,YAAX,kBAFG,CAAZ,EAIKC,IAJL,CAIU,CAAC,CAACC,QAAD,EAAWC,UAAX,CAAD,KAA4B;AAE9B,UAAI,CAACD,QAAQ,CAACE,EAAd,EACI,OAAOF,QAAQ,CAACG,IAAT,GAAgBJ,IAAhB,CAAqBK,CAAC,IAAIT,OAAO,CAACU,MAAR,CAAeD,CAAf,CAA1B,CAAP;AACJ,UAAI,CAACH,UAAU,CAACC,EAAhB,EACI,OAAOD,UAAU,CAACE,IAAX,GAAkBJ,IAAlB,CAAuBK,CAAC,IAAIT,OAAO,CAACU,MAAR,CAAeD,CAAf,CAA5B,CAAP;AAEA,aAAOT,OAAO,CAACC,GAAR,CAAY,CAACI,QAAQ,CAACG,IAAT,EAAD,EAAkBF,UAAU,CAACE,IAAX,EAAlB,CAAZ,CAAP;AACP,KAZL,EAaKJ,IAbL,CAaU,CAAC,CAAC/B,KAAD,EAAQP,OAAR,CAAD,KAAsB;AACzB,YAAM6C,IAAI,GAAG,KAAKvC,oBAAL,CAA0BN,OAA1B,EAAmCO,KAAnC,CAAb;AACC,WAAKF,QAAL,CAAc;AAACL,QAAAA,OAAO,EAAE6C;AAAV,OAAd;AACH,KAhBL,EAiBKC,KAjBL,CAiBWC,KAAK,IAAI;AACZ5C,MAAAA,OAAO,CAAC4C,KAAR,CAAc;AAACA,QAAAA;AAAD,OAAd;AACH,KAnBL;AAoBH;;AAaDC,EAAAA,eAAe,GAAG;AACd,WACI,0CACK,CAAC,GAAD,EAAM,mBAAN,EAA2BvB,GAA3B,CAA+BwB,IAAI,IAChC,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,GAAG,EAAEA,IAFT;AAGI,MAAA,IAAI,EAAEA,IAHV;AAII,MAAA,SAAS,EAAE7D,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,EASI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,eAAZ;AAA4B,MAAA,SAAS,EAAEC,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEA,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EAWI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,SAAS,EAAEA,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAaI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,mBAAZ;AAAgC,MAAA,SAAS,EAAEA,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CADJ;AAiBH;;AAED6D,EAAAA,gBAAgB,GAAG;AACf,WACI,0CACK,CAAC,GAAD,EAAM,mBAAN,EAA2BzB,GAA3B,CAA+BwB,IAAI,IAChC,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,GAAG,EAAEA,IAFT;AAGI,MAAA,IAAI,EAAEA,IAHV;AAII,MAAA,SAAS,EAAE3D,YAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,EASI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,eAAZ;AAA2B,MAAA,SAAS,EAAEC,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAEC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EAWI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAuB,MAAA,SAAS,EAAEC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAYI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,yBAAZ;AAAsC,MAAA,SAAS,EAAEE,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,EAaI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,qBAAZ;AAAkC,MAAA,SAAS,EAAED,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CADJ;AAiBH;;AAEDyD,EAAAA,MAAM,GAAG;AAEL,UAAMC,KAAK,GAAG;AACdpD,MAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OADN;AAEdO,MAAAA,KAAK,EAAE,KAAKA,KAFE;AAGd8C,MAAAA,UAAU,EAAE,KAAK3B,gBAHH;AAId4B,MAAAA,YAAY,EAAE,KAAK1B,kBAJL;AAKdV,MAAAA,OAAO,EAAE,KAAKA,OALA;AAMdjB,MAAAA,SAAS,EAAE,KAAKA,SANF;AAOdsB,MAAAA,YAAY,EAAE,KAAKA,YAPL;AAQdO,MAAAA,UAAU,EAAE,KAAKA,UARH;AASdD,MAAAA,QAAQ,EAAE,KAAKA;AATD,KAAd;AAYA,WACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAEuB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKJ,eAAL,EAA3B,CADJ,EAEI;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EACgC,GADhC,CADJ,CAFJ,EAOI;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,KAAKE,gBAAL,EAA7B,CAPJ,CADJ,CADJ;AAaH;;AAhMuB;;AAmM5B,eAAe/D,UAAU,CAACW,GAAD,CAAzB","sourcesContent":["\nimport React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\nimport NoteListNav from '../NoteListNav/NoteListNav';\nimport NotePageNav from '../NotePageNav/NotePageNav';\nimport NoteListMain from '../NoteListMain/NoteListMain';\nimport NotePageMain from '../NotePageMain/NotePageMain';\nimport AddFolder from '../AddFolder/AddFolder';\nimport AddNote from '../AddNote/AddNote';\nimport EditNote from '../EditNote/EditNote';\nimport EditFolder from '../EditFolder/EditFolder';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport './App.css'\n\nclass App extends Component {\n\n    state = {\n        folders: []\n    }\n\n    addFolder = folder => {\n        console.log('addFolder started')\n        this.setState({ \n            folders: [ ...this.state.folders, folder \n        ]})\n        console.log('addFolder completed')\n    }\n\n    mergeFoldersAndNotes = (folders, notes) => {\n        notes.forEach((note) => {\n          const index = folders.findIndex(f => f.id === note.folder) \n          if (!folders[index].notes) {\n            folders[index].notes = []\n          }\n          folders[index].notes.push({ \n            id: note.id, \n            name: note.name,\n            content: note.content,\n            date: note.date\n          })\n          })\n        return folders\n      }\n\n    addNote = (folders, note) => {\n        console.log('addNote started', folders, note)\n        let addNewNote = (folders, note) => {\n            console.log('addNewNote ran')\n            const i = this.state.folders.forEach(folder => folder.id === note.folderId)\n            folders[i].notes.push(note)\n            console.log(i)\n            console.log(folders)\n            console.log('addNewNote completed')\n            return folders\n        }\n        console.log(addNewNote())\n        console.log('addNote ran')\n        const newFolders = addNewNote(folders, note) \n        console.log(addNewNote())\n        console.log('new folders', newFolders) \n        this.setState({ \n            folders: newFolders\n        })\n        console.log('addNote completed')\n     }\n     \n    updateFolder = updatedFolder => {\n        const newFolders = this.state.folders.map(folder =>\n          (folder.id === updatedFolder.id)\n            ? updatedFolder\n            : folder\n        )\n        this.setState({\n        folders: newFolders\n        })\n    };\n\n    handleDeleteNote = id => {\n        console.log('deleteNote started')\n        return this.state.folders.map(folder => {\n          folder.notes = folder.notes.filter(note => note.id !== id)\n          console.log(folder)\n          return folder\n          this.setState({ folders: folder})\n          console.log(this.state)\n        })\n        console.log('deleteNote completed')\n      }\n\n    handleDeleteFolder = folderId => {\n        this.setState({\n            folders: this.state.folders.filter(folder => folder.id !== folderId)\n        });\n        console.log('deleteFolder ran')\n    };\n\n    getNotes = (folders, notes) => {\n        this.state.folders.forEach((folder) => {\n        let notes = `${folder.notes}`\n        this.setState ({\n            notes: notes\n        })  \n      })\n    }\n\n    componentDidMount() {\n        Promise.all([\n            fetch(`${config.API_ENDPOINT}/api/notes`),\n            fetch(`${config.API_ENDPOINT}/api/folders`)\n        ])\n            .then(([notesRes, foldersRes]) => {\n               \n                if (!notesRes.ok)\n                    return notesRes.json().then(e => Promise.reject(e));\n                if (!foldersRes.ok)\n                    return foldersRes.json().then(e => Promise.reject(e));\n                    \n                    return Promise.all([notesRes.json(), foldersRes.json()]);\n            })\n            .then(([notes, folders]) => {\n               const data = this.mergeFoldersAndNotes(folders, notes)\n                this.setState({folders: data});\n            })\n            .catch(error => {\n                console.error({error});\n            });\n    };\n\n    updateNote = editedNote  => {\n        const newNotes = this.state.map(note =>\n            (note.id === editedNote.id)\n            ? editedNote\n            : note\n            )\n        this.setState({\n            notes: newNotes\n        })\n    }\n\n    renderNavRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListNav}\n                    />\n                ))}\n                <Route path=\"/note/:noteId\" component={NotePageNav} />\n                <Route path=\"/add-folder\" component={NotePageNav} />\n                <Route path=\"/add-note\" component={NotePageNav}\n                 />\n                <Route path=\"/folder/:folderId\" component={NotePageNav} />\n            </>\n        );\n    }\n\n    renderMainRoutes() {\n        return (\n            <>\n                {['/', '/folder/:folderId'].map(path => (\n                    <Route\n                        exact\n                        key={path}\n                        path={path}\n                        component={NoteListMain}\n                    />\n                ))}\n                <Route path='/note/:noteId'component={NotePageMain} />\n                <Route path='/add-folder' component={AddFolder} />\n                <Route path='/add-note'component={AddNote} />\n                <Route path='/folders/:folderId/edit' component={EditFolder} /> \n                <Route path='/notes/:noteId/edit' component={EditNote} /> \n            </>\n        );\n    }\n\n    render() {\n\n        const value = {\n        folders: this.state.folders,\n        notes: this.notes,\n        deleteNote: this.handleDeleteNote,\n        deleteFolder: this.handleDeleteFolder,\n        addNote: this.addNote,\n        addFolder: this.addFolder,\n        updateFolder: this.updateFolder,\n        updateNote: this.updateNote,\n        getNotes: this.getNotes\n        };\n       \n        return (\n            <ApiContext.Provider value={value}>\n                <div className=\"App\">\n                    <nav className=\"App__nav\">{this.renderNavRoutes()}</nav>\n                    <header className=\"App__header\">\n                        <h1>\n                            <Link to=\"/\">Noteful</Link>{' '}\n                        </h1>\n                    </header>\n                    <main className=\"App__main\">{this.renderMainRoutes()}</main>\n                </div>\n            </ApiContext.Provider>\n        );\n    }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}